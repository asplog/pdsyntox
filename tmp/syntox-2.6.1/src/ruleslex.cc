
#line 3 "lex.rules.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rules_create_buffer
#define yy_delete_buffer rules_delete_buffer
#define yy_flex_debug rules_flex_debug
#define yy_init_buffer rules_init_buffer
#define yy_flush_buffer rules_flush_buffer
#define yy_load_buffer_state rules_load_buffer_state
#define yy_switch_to_buffer rules_switch_to_buffer
#define yyin rulesin
#define yyleng rulesleng
#define yylex ruleslex
#define yylineno ruleslineno
#define yyout rulesout
#define yyrestart rulesrestart
#define yytext rulestext
#define yywrap ruleswrap
#define yyalloc rulesalloc
#define yyrealloc rulesrealloc
#define yyfree rulesfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE rulesrestart(rulesin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t rulesleng;

extern FILE *rulesin, *rulesout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rulestext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up rulestext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via rulesrestart()), so that the user can continue scanning by
	 * just pointing rulesin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when rulestext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t rulesleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow ruleswrap()'s to do buffer switches
 * instead of setting up a fresh rulesin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void rulesrestart (FILE *input_file  );
void rules_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE rules_create_buffer (FILE *file,int size  );
void rules_delete_buffer (YY_BUFFER_STATE b  );
void rules_flush_buffer (YY_BUFFER_STATE b  );
void rulespush_buffer_state (YY_BUFFER_STATE new_buffer  );
void rulespop_buffer_state (void );

static void rulesensure_buffer_stack (void );
static void rules_load_buffer_state (void );
static void rules_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER rules_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE rules_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE rules_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE rules_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *rulesalloc (yy_size_t  );
void *rulesrealloc (void *,yy_size_t  );
void rulesfree (void *  );

#define yy_new_buffer rules_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        rulesensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules_create_buffer(rulesin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        rulesensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules_create_buffer(rulesin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ruleswrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *rulesin = (FILE *) 0, *rulesout = (FILE *) 0;

typedef int yy_state_type;

extern int ruleslineno;

int ruleslineno = 1;

extern char *rulestext;
#define yytext_ptr rulestext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up rulestext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	rulesleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[486] =
    {   0,
       82,   80,   81,   78,   80,   81,   79,   81,   80,   81,
       36,   80,   81,   67,   80,   81,   25,   80,   81,   26,
       80,   81,   44,   80,   81,   42,   65,   80,   81,   63,
       80,   81,   43,   66,   80,   81,   64,   80,   81,   45,
       80,   81,   75,   76,   80,   81,   75,   76,   80,   81,
       35,   80,   81,   33,   80,   81,   21,   80,   81,   39,
       80,   81,   22,   80,   81,   80,   81,   74,   80,   81,
       74,   80,   81,   74,   80,   81,   74,   80,   81,   74,
       80,   81,   74,   80,   81,   27,   80,   81,   28,   80,
       81,   73,   80,   81,   73,   80,   81,   73,   80,   81,

       73,   80,   81,   73,   80,   81,   73,   80,   81,   73,
       80,   81,   73,   80,   81,   29,   80,   81,   57,   80,
       81,   30,   80,   81,   80,   81,   80,   81,   80,   81,
       80,   81,   80,   81,   78,   80,   81,   80,   81,   80,
       81,   36,   80,   81,   67,   80,   81,   25,   80,   81,
       26,   80,   81,   44,   80,   81,   42,   65,   80,   81,
       63,   80,   81,   43,   66,   80,   81,   64,   80,   81,
       45,   80,   81,   75,   76,   80,   81,   75,   76,   80,
       81,   35,   80,   81,   33,   80,   81,   21,   80,   81,
       39,   80,   81,   22,   80,   81,   80,   81,   74,   80,

       81,   74,   80,   81,   74,   80,   81,   74,   80,   81,
       74,   80,   81,   74,   80,   81,   27,   80,   81,   28,
       80,   81,   73,   80,   81,   73,   80,   81,   73,   80,
       81,   73,   80,   81,   73,   80,   81,   73,   80,   81,
       73,   80,   81,   73,   80,   81,   29,   80,   81,   57,
       80,   81,   30,   80,   81,   80,   81,   80,   81,   80,
       81,   80,   81,    7,   81,    5,   81,    7,   81,    7,
       81,   11,   81,   10,   81,    9,   11,   81,   13,   15,
       81,   14,   81,   78,   77,    3,   76,   75,   76,   34,
       40,   74,   74,   74,   74,   74,   74,   74,   73,   73,

       73,   73,   50,   73,   73,   73,   73,   73,   73,   31,
       62,   32,   74,   73,    1,   78,   77,    3,   76,   75,
       76,   34,   40,   74,   74,   74,   74,   74,   74,   74,
       73,   73,   73,   73,   50,   73,   73,   73,   73,   73,
       73,   31,   62,   32,   74,   73,    6,    4,    9,   13,
       77,    2,   76,   76,   74,   74,   71,   74,   74,   74,
       73,   73,   73,   73,   73,   73,   73,   17,   16,   19,
       18,   60,   20,   61,   59,   58,   37,   41,   23,   24,
       38,   77,    1,    2,   76,   76,   74,   74,   71,   74,
       74,   74,   73,   73,   73,   73,   73,   73,   73,   17,

       16,   19,   18,   60,   20,   61,   59,   58,   37,   41,
       23,   24,   38,   69,   74,   74,   68,   74,   70,   74,
       51,   73,   73,   73,   54,   73,   52,   73,   73,   55,
       73,   69,   74,   74,   68,   74,   70,   74,   51,   73,
       73,   73,   54,   73,   52,   73,   73,   55,   73,   74,
       73,   49,   73,   53,   73,   12,    8,   74,   73,   49,
       73,   53,   73,   46,   74,   73,   46,   74,   73,   74,
       73,   74,   73,   47,   48,   72,   74,   56,   73,   47,
       48,   72,   74,   56,   73
    } ;

static yyconst flex_int16_t yy_accept[356] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   17,   20,   23,   26,   30,
       33,   37,   40,   43,   47,   51,   54,   57,   60,   63,
       66,   68,   71,   74,   77,   80,   83,   86,   89,   92,
       95,   98,  101,  104,  107,  110,  113,  116,  119,  122,
      125,  127,  129,  131,  133,  135,  138,  140,  142,  145,
      148,  151,  154,  157,  161,  164,  168,  171,  174,  178,
      182,  185,  188,  191,  194,  197,  199,  202,  205,  208,
      211,  214,  217,  220,  223,  226,  229,  232,  235,  238,
      241,  244,  247,  250,  253,  256,  258,  260,  262,  264,

      266,  268,  270,  272,  274,  276,  279,  282,  284,  285,
      285,  286,  286,  287,  287,  287,  288,  288,  290,  291,
      292,  292,  292,  292,  293,  294,  294,  294,  295,  296,
      297,  298,  299,  300,  301,  301,  301,  302,  303,  305,
      306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
      315,  315,  315,  315,  315,  315,  316,  317,  317,  318,
      318,  318,  318,  319,  319,  319,  320,  320,  322,  323,
      324,  324,  324,  324,  325,  326,  326,  326,  327,  328,
      329,  330,  331,  332,  333,  333,  333,  334,  335,  337,
      338,  339,  340,  341,  342,  343,  344,  345,  346,  347,

      347,  347,  347,  347,  347,  347,  348,  349,  350,  351,
      352,  352,  353,  354,  354,  355,  355,  355,  355,  356,
      357,  359,  360,  361,  362,  363,  364,  365,  366,  367,
      368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
      378,  379,  380,  381,  382,  383,  383,  383,  383,  385,
      386,  386,  387,  387,  387,  387,  388,  389,  391,  392,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
      413,  414,  414,  414,  414,  416,  417,  419,  421,  423,
      424,  425,  427,  429,  430,  432,  432,  432,  432,  432,

      432,  434,  435,  437,  439,  441,  442,  443,  445,  447,
      448,  450,  450,  450,  450,  451,  452,  454,  456,  457,
      458,  458,  458,  458,  459,  460,  462,  464,  464,  465,
      465,  466,  467,  467,  468,  468,  469,  470,  470,  470,
      471,  472,  472,  472,  473,  474,  475,  476,  478,  480,
      481,  482,  484,  486,  486
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,   23,   24,   24,   24,   25,   26,   27,
       24,   24,   28,   24,   24,   29,   30,   31,   32,   33,
       24,   34,   24,   35,   36,   24,   24,   24,   37,   24,
       38,   39,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   43,   43,   51,   52,   53,
       54,   55,   43,   56,   57,   58,   59,   43,   60,   61,
       43,   43,   62,   63,   64,    1,    1,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
       98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
      118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
      128,    1,    1,  129,  130,    1,  131,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,  132,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[133] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[364] =
    {   0,
        0,  132,  262,  263,  264,  266,  893,  892,  894, 1258,
      891, 1258,  264, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258,  260,  270,  274,  253, 1258, 1258, 1258, 1258,
      244,  305,  860,  866,  862,  855,  854, 1258, 1258,  421,
      836,  836,  838,  828,  829,  233,  832, 1258, 1258, 1258,
      189,  488,  760,  233,  877,  299,  306,  320,  876,  875,
      874,  873,  872,  871,  870,  869,  868,  309,  365,  369,
      296,  867,  866,  865,  864,  325,  614,  834,  840,  836,
      829,  825,  855,  854,  730,  805,  805,  807,  797,  798,
      269,  801,  847,  846,  845,  290,  859,  273,  413, 1258,

     1258,  359,  837, 1258, 1258,  310,    0, 1258,  844,  339,
     1258,  366, 1258,  842,  371,  376,  390,  413, 1258, 1258,
      788,  790,  796,    0,    0,  923,  720,  806,  813,  809,
      811,  800,    0,    0,  987,  714,  777,  780,    0,  787,
      775,  773,  787,  770, 1258, 1258, 1258,    0,    0,  326,
      335,  319,  331,  760,  823, 1258,  394,  457,  822,  486,
      381,  441,  821,  820,  489,  494,  496,  500,  819,  818,
      386,  440,  437,    0,    0, 1051,  374,  786,  793,  789,
      791,  780,    0,    0, 1115,  377,  758,  761,    0,  768,
      756,  754,  768,  751,  805,  804,  803,    0,    0,  418,

      536,  431,  422,  560,  512, 1258, 1258,  396,    0,  490,
      802, 1258,  606,  514,  516,  762,  748,  741,  771,  769,
        0,  774,  772,  751,  746,  749,  736,  735,  748,  721,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258,  650,  625,  626,  766, 1258,  674,
      525,  531,  501,  623,  621,  738,  722,    0,  727,  725,
      704,  692,  695,  682,  681,  694,  688,  733,  732,  731,
      730,  729,  727,  726,  725,  722,  720,  719,  718,  716,
      715,  665,  657,  665,    0,  679,    0,    0,    0,  656,
      656,    0,    0,  665,    0,  634,  678,  631,  341,  681,

        0,  675,    0,    0,    0,  652,  652,    0,    0,  661,
        0,  654,  647,  660,  675,  653,    0,    0,  698,  695,
      633,  630,  683,  669,  647,    0,    0,  652, 1258,  639,
      600,  579,  684,  547,  689,  514,  499,  488,  484,  484,
      473,  692,  696,  478,  396, 1258, 1258,    0,    0,  401,
      315,    0,    0, 1258, 1243, 1245, 1247,  310, 1249, 1251,
      284, 1253, 1255
    } ;

static yyconst flex_int16_t yy_def[364] =
    {   0,
      354,  354,  355,  355,  356,  356,  357,  357,  354,  354,
      354,  354,  358,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,   32,   32,   32,   32,   32,  354,  354,  354,
       40,   40,   40,   40,   40,   40,   40,  354,  354,  354,
      354,  354,  354,  354,  359,  359,  360,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,   77,   77,   77,
       77,   77,  359,  359,   77,   85,   85,   85,   85,   85,
       85,   85,  359,  359,  359,  359,  359,  359,  359,  354,

      354,  354,  354,  354,  354,  354,  361,  354,  354,  358,
      354,  358,  354,  362,  354,  354,  354,  354,  354,  354,
      354,  354,  354,   32,   32,  354,  354,   32,   32,   32,
       32,   32,   40,   40,  354,  354,   40,   40,   40,   40,
       40,   40,   40,   40,  354,  354,  354,   32,   40,  354,
      354,  354,  354,  354,  359,  354,  359,  360,  359,  360,
      359,  359,  359,  363,  359,  359,  359,  359,  359,  359,
      359,  359,  359,   77,   77,   97,  359,   77,   77,   77,
       77,   77,   85,   85,   97,  359,   85,   85,   85,   85,
       85,   85,   85,   85,  359,  359,  359,   77,   85,  359,

      359,  359,  359,  359,  354,  354,  354,  354,  361,  358,
      362,  354,  354,  354,  354,  354,  354,  354,   32,   32,
       32,   32,   32,   40,   40,   40,   40,   40,   40,   40,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  360,  359,  359,  363,  354,  359,
      359,  359,  359,  359,  359,   77,   77,   77,   77,   77,
       85,   85,   85,   85,   85,   85,   85,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  354,  354,  354,   32,   32,   32,   32,   40,   40,
       40,   40,   40,   40,   40,  359,  359,  359,  359,  359,

       77,   77,   77,   77,   85,   85,   85,   85,   85,   85,
       85,  354,  354,  354,   32,   40,   40,   40,  359,  359,
      359,  359,  359,   77,   85,   85,   85,  354,  354,  354,
       32,   40,  359,  359,  359,   77,   85,  354,  354,   32,
       40,  359,  359,   77,   85,  354,  354,   32,   40,  359,
      359,   77,   85,    0,  354,  354,  354,  354,  354,  354,
      354,  354,  354
    } ;

static yyconst flex_int16_t yy_nxt[1391] =
    {   0,
       10,   11,   12,   13,   10,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   32,   32,   33,   34,   32,   32,
       35,   32,   36,   32,   37,   32,   32,   38,   10,   39,
       40,   40,   40,   40,   40,   41,   42,   40,   40,   43,
       40,   40,   40,   44,   40,   40,   45,   46,   40,   47,
       40,   48,   49,   50,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   51,   52,
       53,   54,   55,   56,   12,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   77,   77,   78,   79,
       77,   77,   80,   77,   81,   77,   82,   77,   77,   83,
       55,   84,   85,   85,   85,   85,   85,   86,   87,   85,
       85,   88,   85,   85,   85,   89,   85,   85,   90,   91,
       85,   92,   85,   93,   94,   95,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       96,   97,   98,   99,  101,  101,  105,  111,  105,  113,
      119,  102,  102,  120,  114,  156,  103,  103,  142,  106,
      106,  106,  106,  115,  209,  116,  116,  115,  143,  118,
      118,  121,  156,  122,  123,  117,  145,  146,  156,  117,

      157,  156,  112,  150,  151,  152,  153,  154,  156,  159,
      110,  156,  147,  169,  192,  117,  170,  156,  163,  117,
      124,  124,  156,  164,  193,  208,  208,  156,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  111,  156,  160,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  161,  156,  205,  210,
      162,  156,  171,  206,  172,  173,  156,  112,  165,  156,
      166,  166,  165,  156,  168,  168,  213,  213,  156,  115,
      167,  116,  116,  198,  167,  157,  156,  195,  196,  322,

      214,  117,  214,  156,  112,  215,  215,  231,  232,  233,
      167,  208,  208,  197,  167,  156,  234,  235,  236,  237,
      156,  117,  238,  239,  156,  240,  115,  241,  118,  118,
      246,  242,  243,  156,  126,  127,  133,  133,  117,  156,
      353,  253,  156,  156,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  117,  156,
      159,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  255,  200,  201,  202,  203,  204,  156,  245,
      247,  156,  254,  111,  175,  160,  156,  184,  156,  268,

      269,  270,  156,  156,  250,  250,  251,  165,  251,  166,
      166,  252,  252,  165,  352,  168,  168,  349,  278,  167,
      348,  205,  279,  280,  160,  167,  206,  156,  112,  215,
      215,  215,  215,  156,  275,  276,  347,  277,  156,  167,
      252,  252,  298,  346,  345,  167,  252,  252,  344,  156,
      135,  136,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  156,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  156,  271,  272,  273,
      274,  213,  213,  156,  341,  156,  281,  156,  156,  174,
      174,  117,  156,  156,  340,  156,  156,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  117,  156,  159,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  296,  156,  299,  297,  319,
      156,  300,  321,  156,  333,  156,  156,  334,  160,  250,
      250,  156,  339,  338,  156,  337,  336,  156,  156,  167,

      156,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      318,  317,  316,  315,  314,  313,  312,  156,  156,  167,
      156,  156,  156,  320,  156,  342,  335,  156,  156,  156,
      323,  156,  156,  156,  156,  156,  311,  310,  309,  308,
      307,  306,  343,  176,  177,  183,  183,  350,  351,  305,
      304,  303,  302,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  301,  249,  295,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  294,  293,  292,  291,  290,  289,  288,  287,  286,

      285,  284,  283,  282,  212,  156,  156,  156,  267,  266,
      265,  264,  263,  262,  261,  260,  259,  258,  257,  256,
      156,  156,  249,  156,  156,  156,  244,  230,  229,  228,
      227,  226,  225,  224,  134,  223,  222,  221,  220,  219,
      125,  218,  217,  216,  212,  109,  207,  156,  156,  156,
      194,  191,  190,  189,  188,  187,  156,  156,  182,  185,
      186,  156,  181,  180,  179,  178,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      148,  144,  141,  140,  139,  138,  137,  132,  131,  130,
      129,  128,  109,  354,  108,  108,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  354,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  354,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  354,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  354,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  354,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  100,  100,  104,  104,  107,  107,  155,
      155,  158,  158,  211,  211,  248,  248,    9,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354
    } ;

static yyconst flex_int16_t yy_chk[1391] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    4,    5,   13,    6,   23,
       26,    3,    4,   26,   23,   98,    3,    4,   46,    5,
        5,    6,    6,   24,  361,   24,   24,   25,   46,   25,
       25,   31,   96,   31,   31,   24,   51,   51,   71,   25,

       56,   56,   13,   54,   54,   54,   54,   54,   57,   57,
      358,   68,   51,   71,   91,   24,   71,  351,   68,   25,
       32,   32,   58,   68,   91,  106,  106,   76,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,  110,  299,   57,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   58,   69,  102,  112,
       58,   70,   76,  102,   76,   76,  177,  110,   69,  186,
       69,   69,   70,  161,   70,   70,  115,  115,  171,  116,
       69,  116,  116,   98,   70,  157,  157,   96,   96,  299,

      117,  116,  117,  350,  112,  117,  117,  150,  150,  150,
       69,  208,  208,   96,   70,   99,  151,  151,  151,  151,
      200,  116,  152,  152,  203,  152,  118,  153,  118,  118,
      161,  153,  153,  202,   32,   32,   40,   40,  118,  173,
      345,  171,  172,  162,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,  118,  158,
      158,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,  173,   99,   99,   99,   99,   99,  160,  160,
      162,  165,  172,  210,  177,  158,  166,  186,  167,  200,

      200,  200,  168,  253,  165,  165,  167,  166,  167,  166,
      166,  167,  167,  168,  344,  168,  168,  341,  203,  166,
      340,  205,  203,  203,  160,  168,  205,  251,  210,  214,
      214,  215,  215,  252,  202,  202,  339,  202,  201,  166,
      251,  251,  253,  338,  337,  168,  252,  252,  336,  334,
       40,   40,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  204,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   77,  201,  201,  201,
      201,  213,  213,  255,  332,  254,  204,  246,  247,   77,
       77,  213,  322,  298,  331,  321,  296,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  213,  245,  245,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  246,  250,  254,  247,  296,
      297,  255,  298,  300,  321,  323,  333,  322,  245,  250,
      250,  335,  330,  328,  342,  325,  324,  320,  343,  250,

      319,  316,  315,  314,  313,  312,  310,  307,  306,  302,
      294,  291,  290,  286,  284,  283,  282,  281,  280,  250,
      279,  278,  277,  297,  276,  333,  323,  275,  274,  273,
      300,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  335,   77,   77,   85,   85,  342,  343,  261,
      260,  259,  257,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  256,  248,  230,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  229,  228,  227,  226,  225,  224,  223,  222,  220,

      219,  218,  217,  216,  211,  197,  196,  195,  194,  193,
      192,  191,  190,  188,  187,  182,  181,  180,  179,  178,
      170,  169,  164,  163,  159,  155,  154,  144,  143,  142,
      141,  140,  138,  137,  136,  132,  131,  130,  129,  128,
      127,  123,  122,  121,  114,  109,  103,   95,   94,   93,
       92,   90,   89,   88,   87,   86,   84,   83,   82,   85,
       85,   97,   81,   80,   79,   78,   75,   74,   73,   72,
       67,   66,   65,   64,   63,   62,   61,   60,   59,   55,
       53,   47,   45,   44,   43,   42,   41,   37,   36,   35,
       34,   33,   11,    9,    8,    7,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,    0,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,    0,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,    0,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,    0,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,    0,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  355,  355,  356,  356,  357,  357,  359,
      359,  360,  360,  362,  362,  363,  363,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354
    } ;

extern int rules_flex_debug;
int rules_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up rulestext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *rulestext;
#line 1 "ruleslex.ll"
#line 2 "ruleslex.ll"
/* ************************************************************
 * Syntox
 * Copyright 2012-2013 Lionel Clément. All rights reserved.
 * Author: Lionel Clément
 * Labri
 * 351, cours de la Libération
 * 33405 Talence Cedex - France
 * lionel.clement@labri.fr
 ************************************************************ */

// ↑
#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <vector>
#include <list>
using namespace std;

#include "enum.hh"
#include "bits.hh"
#include "term.hh"
#include "rulesyacc.hh"

#if false
#define DBUG(x)x
#else
#define DBUG(x)
#endif
#define DBUGPRT(x) DBUG(cerr << "*** " << x << "<BR>\n");
#define DBUGPRTARG(x,s) DBUG(cerr << "*** " << x << "&nbsp;" << s << "<BR>\n");

int rulescolno;
std::string *str;
int comments;
 
char *lexString;
bool stringInput;
string fileName="";

#define YY_INPUT(buf,result,max_size){	\
   if (stringInput){					\
     char c = *lexString++;				\
     result = !c ? YY_NULL : (buf[0] = c, 1);		\
   } else {							\
     if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive )		\
       {								\
	 int c = '*';							\
	 yy_size_t n;							\
	 for ( n = 0; n < max_size &&					\
		 (c = getc( rulesin )) != EOF && c != '\n'; ++n )		\
	   buf[n] = (char) c;						\
	 if ( c == '\n' )						\
	   buf[n++] = (char) c;						\
	 if ( c == EOF && ferror( rulesin ) )				\
	   YY_FATAL_ERROR( "input in flex scanner failed" );		\
	 result = n;							\
       }								\
     else								\
       {								\
	 errno=0;							\
	 while ( (result = fread(buf, 1, max_size, rulesin))==0 && ferror(rulesin)) \
	   {								\
	     if( errno != EINTR)					\
	       {							\
		 YY_FATAL_ERROR( "input in flex scanner failed" );	\
		 break;							\
	       }							\
	     errno=0;							\
	     clearerr(rulesin);						\
	   }								\
       }								\
   }									\
 }  
 

#line 1041 "lex.rules.c"

#define INITIAL 0
#define COMMENT 1
#define LINE 2
#define FILENAME 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ruleslex_destroy (void );

int rulesget_debug (void );

void rulesset_debug (int debug_flag  );

YY_EXTRA_TYPE rulesget_extra (void );

void rulesset_extra (YY_EXTRA_TYPE user_defined  );

FILE *rulesget_in (void );

void rulesset_in  (FILE * in_str  );

FILE *rulesget_out (void );

void rulesset_out  (FILE * out_str  );

yy_size_t rulesget_leng (void );

char *rulesget_text (void );

int rulesget_lineno (void );

void rulesset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ruleswrap (void );
#else
extern int ruleswrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( rulestext, rulesleng, 1, rulesout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( rulesin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( rulesin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, rulesin))==0 && ferror(rulesin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(rulesin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ruleslex (void);

#define YY_DECL int ruleslex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after rulestext and rulesleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( rulesleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(rulestext[rulesleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 98 "ruleslex.ll"


#line 1230 "lex.rules.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)rulesalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in ruleslex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! rulesin )
			rulesin = stdin;

		if ( ! rulesout )
			rulesout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			rulesensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				rules_create_buffer(rulesin,YY_BUF_SIZE );
		}

		rules_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of rulestext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 355 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1258 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up rulestext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up rulestext again */
YY_RULE_SETUP
#line 100 "ruleslex.ll"
{
  DBUGPRTARG("••••••••••••••• ", rulestext);
  REJECT;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 105 "ruleslex.ll"
{
  /* Passe les commentaires de type C++*/
  rulescolno = 1;
  ruleslineno++;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 111 "ruleslex.ll"
{comments=0; BEGIN COMMENT;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 112 "ruleslex.ll"
{comments++;}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 113 "ruleslex.ll"
{ruleslineno++; rulescolno=1;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 114 "ruleslex.ll"
{if (!(comments--)) BEGIN INITIAL;} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 115 "ruleslex.ll"
;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "ruleslex.ll"
{BEGIN LINE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "ruleslex.ll"
{ruleslineno=atoi(rulestext);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 119 "ruleslex.ll"
{  
  DBUGPRT("TOKEN_#LINE\n");
  BEGIN INITIAL;};
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 122 "ruleslex.ll"
;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 124 "ruleslex.ll"
{BEGIN FILENAME;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 126 "ruleslex.ll"
{
  fileName=rulestext;
 }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 130 "ruleslex.ll"
{
  DBUGPRT("TOKEN_#FILE\n");
  BEGIN INITIAL;
 };
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "ruleslex.ll"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 137 "ruleslex.ll"
{
  DBUGPRT("TOKEN_RIGHTARROW\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_RIGHTARROW;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "ruleslex.ll"
{
  DBUGPRT("TOKEN_UPARROW\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_UPARROW;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "ruleslex.ll"
{
  DBUGPRT("TOKEN_UP2ARROW\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_UP2ARROW;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "ruleslex.ll"
{
  DBUGPRT("TOKEN_DOWNARROW\n");
  ruleslval.int_slot = 1;
  rulescolno+=strlen(rulestext);
  return TOKEN_DOWNARROW;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 162 "ruleslex.ll"
{
  DBUGPRT("TOKEN_DOWN2ARROW\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_DOWN2ARROW;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 168 "ruleslex.ll"
{
  DBUGPRT("TOKEN_LT\n");
  rulescolno += rulesleng;
  return TOKEN_LT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 174 "ruleslex.ll"
{
  DBUGPRT("TOKEN_GT\n");
  rulescolno += rulesleng;
  return TOKEN_GT;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 180 "ruleslex.ll"
{
  DBUGPRT("TOKEN_LE\n");
  rulescolno += rulesleng;
  return TOKEN_LT;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 186 "ruleslex.ll"
{
  DBUGPRT("TOKEN_GE\n");
  rulescolno += rulesleng;
  return TOKEN_GE;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 192 "ruleslex.ll"
{
  DBUGPRT("TOKEN_LPAR\n");
  rulescolno += rulesleng;
  return TOKEN_LPAR;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "ruleslex.ll"
{
  DBUGPRT("TOKEN_RPAR\n");
  rulescolno += rulesleng;
  return TOKEN_RPAR;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 204 "ruleslex.ll"
{
  DBUGPRT("TOKEN_LBRACKET\n");
  rulescolno += rulesleng;
  return TOKEN_LBRACKET;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 210 "ruleslex.ll"
{
  DBUGPRT("TOKEN_RBRACKET\n");
  rulescolno += rulesleng;
  return TOKEN_RBRACKET;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 216 "ruleslex.ll"
{
  DBUGPRT("TOKEN_LBRACE\n");
  rulescolno += rulesleng;
  return TOKEN_LBRACE;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 222 "ruleslex.ll"
{
  DBUGPRT("TOKEN_RBRACE\n");
  rulescolno += rulesleng;
  return TOKEN_RBRACE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 228 "ruleslex.ll"
{
  DBUGPRT("TOKEN_LEFT_DOUBLE_ANGLE_QUOTATION_MARK");
  rulescolno += rulesleng;
  return TOKEN_LEFT_DOUBLE_ANGLE_QUOTATION_MARK;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 234 "ruleslex.ll"
{
  DBUGPRT("TOKEN_RIGHT_DOUBLE_ANGLE_QUOTATION_MARK");
  rulescolno += rulesleng;
  return TOKEN_RIGHT_DOUBLE_ANGLE_QUOTATION_MARK;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 240 "ruleslex.ll"
{
  DBUGPRT("TOKEN_SEMI\n");
  rulescolno += rulesleng;
  return TOKEN_SEMI;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 246 "ruleslex.ll"
{
  DBUGPRT("TOKEN_COLON2\n");
  rulescolno += rulesleng;
  return TOKEN_COLON2;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 252 "ruleslex.ll"
{
  DBUGPRT("TOKEN_COLON\n");
  rulescolno += rulesleng;
  return TOKEN_COLON;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 258 "ruleslex.ll"
{
  DBUGPRT("TOKEN_DOLLAR");
  rulescolno += rulesleng;
  return TOKEN_DOLLAR;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 264 "ruleslex.ll"
{
  DBUGPRT("TOKEN_UNION\n");
  rulescolno += rulesleng;
  return TOKEN_UNION;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 270 "ruleslex.ll"
{
  DBUGPRT("TOKEN_SUBSET\n");
  rulescolno += rulesleng;
  return TOKEN_SUBSET;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 278 "ruleslex.ll"
{
  DBUGPRT("TOKEN_EQUAL\n");
  rulescolno += rulesleng;
  return TOKEN_EQUAL;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 284 "ruleslex.ll"
{
  DBUGPRT("TOKEN_AFF\n");
  rulescolno += rulesleng;
  return TOKEN_AFF;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 290 "ruleslex.ll"
{
  DBUGPRT("TOKEN_DIFF\n");
  rulescolno += rulesleng;
  return TOKEN_DIFF;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 296 "ruleslex.ll"
{
  DBUGPRT("TOKEN_PLUS\n");
  rulescolno += rulesleng;
  return TOKEN_PLUS;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 302 "ruleslex.ll"
{
  DBUGPRT("TOKEN_MINUS\n");
  rulescolno += rulesleng;
  return TOKEN_MINUS;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 308 "ruleslex.ll"
{
  DBUGPRT("TOKEN_TIMES\n");
  rulescolno += rulesleng;
  return TOKEN_TIMES;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 314 "ruleslex.ll"
{
  DBUGPRT("TOKEN_DIVIDE\n");
  rulescolno += rulesleng;
  return TOKEN_DIVIDE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 320 "ruleslex.ll"
{
  DBUGPRT("TOKEN_INPUT\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_INPUT;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 326 "ruleslex.ll"
{
  DBUGPRT("TOKEN_RULES\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_GRAMMAR;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 332 "ruleslex.ll"
{
  DBUGPRT("TOKEN_INPUTLEXICON\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_LEXICON;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 338 "ruleslex.ll"
{
  DBUGPRT("TOKEN_ORDER\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_ORDER;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 344 "ruleslex.ll"
{
  DBUGPRT("TOKEN_IF\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_IF;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 350 "ruleslex.ll"
{
  DBUGPRT("TOKEN_ELSE\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_ELSE;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 356 "ruleslex.ll"
{
  DBUGPRT("TOKEN_TEST\n");
  rulescolno+=rulesleng;
  return TOKEN_TEST;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 362 "ruleslex.ll"
{
  DBUGPRT("TOKEN_TRACE\n");
  rulescolno+=rulesleng;
  return TOKEN_TRACE;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 368 "ruleslex.ll"
{
  DBUGPRT("TOKEN_SORT\n");
  rulescolno+=rulesleng;
  return TOKEN_SORT;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 374 "ruleslex.ll"
{
  DBUGPRT("TOKEN_WITH\n");
  rulescolno+=rulesleng;
  return TOKEN_WITH;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 380 "ruleslex.ll"
{
  DBUGPRT("TOKEN_FINISHED\n");
  rulescolno+=rulesleng;
  return TOKEN_FINISHED;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 386 "ruleslex.ll"
{
  DBUGPRT("TOKEN_PIPE\n");
  rulescolno += rulesleng;
  return TOKEN_PIPE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 392 "ruleslex.ll"
{
  DBUGPRT("TOKEN_OR\n");
  rulescolno += rulesleng;
  return TOKEN_OR;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 398 "ruleslex.ll"
{
  DBUGPRT("TOKEN_AND\n");
  rulescolno += rulesleng;
  return TOKEN_AND;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 404 "ruleslex.ll"
{
  DBUGPRT("TOKEN_IMP\n");
  rulescolno += rulesleng;
  return TOKEN_IMP;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 410 "ruleslex.ll"
{
  DBUGPRT("TOKEN_EQUIV\n");
  rulescolno += rulesleng;
  return TOKEN_EQUIV;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 416 "ruleslex.ll"
{
  DBUGPRT("TOKEN_NOT\n");
  rulescolno += rulesleng;
  return TOKEN_NOT;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 422 "ruleslex.ll"
{
  DBUGPRT("TOKEN_COMMA\n");
  rulescolno += rulesleng;
  return TOKEN_COMMA;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 428 "ruleslex.ll"
{
  DBUGPRT("TOKEN_DOT\n");
  rulescolno += rulesleng;
  return TOKEN_DOT;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 434 "ruleslex.ll"
{
  DBUGPRT("TOKEN_PLUS\n");
  rulescolno += rulesleng;
  return TOKEN_PLUS;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 440 "ruleslex.ll"
{
  DBUGPRT("TOKEN_MINUS\n");
  rulescolno += rulesleng;
  return TOKEN_MINUS;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 446 "ruleslex.ll"
{
  DBUGPRT("TOKEN_MODULO\n");
  rulescolno += rulesleng;
  return TOKEN_MODULO;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 452 "ruleslex.ll"
{
  DBUGPRT("TOKEN_PRED\n");
  rulescolno+=rulesleng;
  return TOKEN_PRED;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 458 "ruleslex.ll"
{
  DBUGPRT("TOKEN_FORM\n");
  rulescolno+=rulesleng;
  return TOKEN_FORM;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 464 "ruleslex.ll"
{
  DBUGPRT("TOKEN_TRUE\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_TRUE;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 470 "ruleslex.ll"
{
  DBUGPRT("TOKEN_NILL\n");
  rulescolno+=strlen(rulestext);
  return TOKEN_NIL;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 476 "ruleslex.ll"
{
  DBUGPRT("TOKEN_IDENTITY\n");
  rulescolno+=rulesleng;
  return TOKEN_IDENTITY;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 482 "ruleslex.ll"
{
  DBUGPRTARG("TOKEN_IDENTIFIER ", rulestext);
  rulescolno+=strlen(rulestext);
  ruleslval.string_slot = new string(rulestext);
  return TOKEN_IDENTIFIER;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 489 "ruleslex.ll"
{
  DBUGPRTARG("TOKEN_VARIABLE ", rulestext);
  rulescolno+=strlen(rulestext);
  ruleslval.string_slot = new string(rulestext);
  return TOKEN_VARIABLE;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 496 "ruleslex.ll"
{
  DBUGPRTARG("TOKEN_INTEGER ", rulestext);
  rulescolno+=strlen(rulestext);
  //ruleslval.string_slot = new string(rulestext);
  sscanf(rulestext, "%d", &ruleslval.int_slot);
  return TOKEN_INTEGER;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 504 "ruleslex.ll"
{
  DBUGPRTARG("TOKEN_FLOAT ", rulestext);
  rulescolno+=strlen(rulestext);
  //ruleslval.string_slot = new string(rulestext);
  sscanf(rulestext, "%f", &ruleslval.float_slot);
  return TOKEN_FLOAT;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 512 "ruleslex.ll"
{
  DBUGPRTARG("TOKEN_STRING ", rulestext);
  rulescolno+=strlen(rulestext);
  string s = rulestext;
  ruleslval.string_slot = new string(s.substr(1, s.length()-2));
  return TOKEN_STRING;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 520 "ruleslex.ll"
{
  rulescolno+=strlen(rulestext);
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 524 "ruleslex.ll"
{
  ruleslineno++;
  rulescolno=1;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 529 "ruleslex.ll"
{
  DBUGPRTARG("OTHER TOKEN ", rulestext);
  rulescolno+=strlen(rulestext);
  return (rulestext [0]);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 535 "ruleslex.ll"
ECHO;
	YY_BREAK
#line 2017 "lex.rules.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(LINE):
			case YY_STATE_EOF(FILENAME):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed rulesin at a new source and called
			 * ruleslex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = rulesin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( ruleswrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * rulestext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ruleslex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			rulesrestart(rulesin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) rulesrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 355 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 355 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 354);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					rulesrestart(rulesin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ruleswrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve rulestext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void rulesrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        rulesensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            rules_create_buffer(rulesin,YY_BUF_SIZE );
	}

	rules_init_buffer(YY_CURRENT_BUFFER,input_file );
	rules_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void rules_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		rulespop_buffer_state();
	 *		rulespush_buffer_state(new_buffer);
     */
	rulesensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	rules_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (ruleswrap()) processing, but the only time this flag
	 * is looked at is after ruleswrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void rules_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	rulesin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE rules_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) rulesalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) rulesalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules_create_buffer()" );

	b->yy_is_our_buffer = 1;

	rules_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with rules_create_buffer()
 * 
 */
    void rules_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		rulesfree((void *) b->yy_ch_buf  );

	rulesfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a rulesrestart() or at EOF.
 */
    static void rules_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	rules_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then rules_init_buffer was _probably_
     * called from rulesrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void rules_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		rules_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void rulespush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	rulesensure_buffer_stack();

	/* This block is copied from rules_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from rules_switch_to_buffer. */
	rules_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void rulespop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	rules_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		rules_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void rulesensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)rulesalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rulesensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)rulesrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rulesensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE rules_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) rulesalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	rules_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ruleslex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       rules_scan_bytes() instead.
 */
YY_BUFFER_STATE rules_scan_string (yyconst char * yystr )
{
    
	return rules_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to ruleslex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE rules_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) rulesalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = rules_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in rules_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rulestext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		rulestext[rulesleng] = (yy_hold_char); \
		(yy_c_buf_p) = rulestext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		rulesleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int rulesget_lineno  (void)
{
        
    return ruleslineno;
}

/** Get the input stream.
 * 
 */
FILE *rulesget_in  (void)
{
        return rulesin;
}

/** Get the output stream.
 * 
 */
FILE *rulesget_out  (void)
{
        return rulesout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t rulesget_leng  (void)
{
        return rulesleng;
}

/** Get the current token.
 * 
 */

char *rulesget_text  (void)
{
        return rulestext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void rulesset_lineno (int  line_number )
{
    
    ruleslineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see rules_switch_to_buffer
 */
void rulesset_in (FILE *  in_str )
{
        rulesin = in_str ;
}

void rulesset_out (FILE *  out_str )
{
        rulesout = out_str ;
}

int rulesget_debug  (void)
{
        return rules_flex_debug;
}

void rulesset_debug (int  bdebug )
{
        rules_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ruleslex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    rulesin = stdin;
    rulesout = stdout;
#else
    rulesin = (FILE *) 0;
    rulesout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ruleslex_init()
     */
    return 0;
}

/* ruleslex_destroy is for both reentrant and non-reentrant scanners. */
int ruleslex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		rules_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		rulespop_buffer_state();
	}

	/* Destroy the stack itself. */
	rulesfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    rulesfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ruleslex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *rulesalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *rulesrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void rulesfree (void * ptr )
{
	free( (char *) ptr );	/* see rulesrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 535 "ruleslex.ll"



