////////////// afternoon in Paris   /////////////

S → X
{
[length: Length];
//[density: Density];
TON := 0;
List := <[type:a, fin:0, ton:TON], [type:a, fin:1, ton:TON], [type:b, ton:TON], [type:a, fin:0, ton:TON], [type:none]>;
↓ := [content: List, length: Length];
};

X → S X
{
[content:<Head::Tail>, length: L];
test L > 0;
↓1 := Head;
M := L - 1;
↓2 := [content: Tail, length: M];
};

X →
{
[content:NIL];
};

X →
{
[length: 0];
};

S → A Fin
{
	[type: a];
	[ton:TON, fin:FIN] ⊂ ↑;
	↓1 := [ton: TON];
	↓2 := [ton: TON, fin: FIN];
};

A → CAD CAD CAD CAD
{
	// -2 mod 12 sur N = +10
    [ton:TON] ⊂ ↑;
	Step := 10; 
	T := TON; 
	Fd1 := T; 
	↓1 := [cad:0, type:0, fond:Fd1, length:1, base:6, density:2, link_base:tonality, link_value:0];
[dernierAccord:DERNIER_ACCORD] ⊂ ⇓1;
	Lg := 4; 
	Bs := 7; 
	Bse := Bs - 1; 
	PREMIER_ACCORD2 := DERNIER_ACCORD; 
	Fd2 :=  (PREMIER_ACCORD2 + (((Lg - 1) + ((7 - Bs) - 1)) * 5)) % 12; 
	↓2 := [cad:0, type:1, fond:Fd2, length:Lg, base:Bs, density:1, link_base:previous_chord, link_value:0];
[dernierAccord:DERNIER_ACCORD2] ⊂ ⇓2;
	Fd3 := (DERNIER_ACCORD2 + Step) % 12; 
	↓3 := [cad:0, type:1, fond:Fd3, length:4, base:7, density:1, link_base:previous_chord, link_value:0];
	↓4 := [cad:0, type:1, fond:Fd1, length:4, base:7, density:1, link_base:tonality, link_value:0];
};

S → CAD CAD CAD CAD
{
	[type:b];
    [ton:TON] ⊂ ↑;
	Fd1 := TON; 
	Fd2 := (Fd1 + 2) % 12;
	↓1 := [cad:0, type:0, fond:Fd1, length:2, base:5, density:2, link_base:tonality, link_value:0];
[dernierAccord:DERNIER_ACCORD] ⊂ ⇓1;
	Fd2 := (DERNIER_ACCORD + Step) % 12; 
	↓2 := [cad:0, type:0, fond:Fd2, length:2, base:5, density:2, link_base:previous_chord, link_value:2];
	↓3 := [cad:0, type:0, fond:Fd1, length:3, base:6, density:2, link_base:tonality, link_value:0];
	↓4 := [cad:0, type:0, fond:Fd1, length:2, base:5, density:1, link_base:tonality, link_value:0];
};

Fin → CAD
{
	[fin:0];
	    [ton:TON] ⊂ ↑;
	Fd1 := TON; 
↓1 := [cad:0, type:0, fond:Fd1, length:2, base:5, density:1, link_base:tonality, link_value:0];
};

Fin → CAD 
{
	[fin:1];
    [ton:TON] ⊂ ↑;
	Fd1 := TON; 
	↓1 := [cad:0, type:0, fond:Fd1, length:1, base:6, density:2, link_base:tonality, link_value:0];
};

////// Cadences Majeures ////////////////

CAD → (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) // VIIm75b IIIm7 VIm7 IIm7 V7 IM7 IVM7
{
	[cad:0, type:0];
	[length:Length0, base:Base];

Q1 := q0;
if (Q1=q0) {if ($1) Q2 := q1; else Q2 := q0;}

if (Q2=q0) {if ($2) Q3 := q1; else Q3 := q0;}
else if (Q2=q1) {if ($2) Q3 := q1; else	Q3 := q2;}
else if (Q2=q2) {if ($2) Q3 := qf; else	Q3 := q2;}
else if (Q2=qf) {Q3 := qf;}

if (Q3=q0) {if ($3) Q4 := q1; else Q4 := q0;}
else if (Q3=q1) {if ($3) Q4 := q1; else	Q4 := q2;}
else if (Q3=q2) {if ($3) Q4 := qf; else	Q4 := q2;}
else if (Q3=qf) {Q4 := qf;}

if (Q4=q0) {if ($4) Q5 := q1; else Q5 := q0;}
else if (Q4=q1) {if ($4) Q5 := q1; else	Q5 := q2;}
else if (Q4=q2) {if ($4) Q5 := qf; else	Q5 := q2;}
else if (Q4=qf) {Q5 := qf;}

if (Q5=q0) {if ($5) Q6 := q1; else Q6 := q0;}
else if (Q5=q1) {if ($5) Q6 := q1; else	Q6 := q2;}
else if (Q5=q2) {if ($5) Q6 := qf; else	Q6 := q2;}
else if (Q5=qf) {Q6 := qf;}

if (Q6=q0) {if ($6) Q7 := q1; else Q7 := q0;}
else if (Q6=q1) {if ($6) Q7 := q1; else	Q7 := q2;}
else if (Q6=q2) {if ($6) Q7 := qf; else	Q7 := q2;}
else if (Q6=qf) {Q7 := qf;}

if (Q7=q0) {if ($7) Q8 := q1; else Q8 := q0;}
else if (Q7=q1) {if ($7) Q8 := q1; else	Q8 := q2;}
else if (Q7=q2) {if ($7) Q8 := qf; else	Q8 := q2;}
else if (Q7=qf) {Q8 := qf;}

test (Q8≠qf);

// Lionel modifie pour que base=X signifie
// que la séquence se termine par X

if (Base=1) {
	test ($1 ∧ ¬$2);
}
else if (Base=2) {
	test ($2 ∧ ¬$3);
}
else if (Base=3) {
	test ($3 ∧ ¬$4);
}
else if (Base=4) {
	test ($4 ∧ ¬$5);
}
else if (Base=5) {
	test ($5 ∧ ¬$6);
}
else if (Base=6) {
	test ($6 ∧ ¬$7);
}
else if (Base=7) {
	test ($7);
}

// Ceci pour compter
	if ($1)	Length1 := Length0-1; else Length1 := Length0;	
	if ($2)	Length2 := Length1-1; else Length2 := Length1;	
	if ($3)	Length3 := Length2-1; else Length3 := Length2;	
	if ($4)	Length4 := Length3-1; else Length4 := Length3;	
	if ($5)	Length5 := Length4-1; else Length5 := Length4;	
	if ($6)	Length6 := Length5-1; else Length6 := Length5;	
	if ($7)	Length7 := Length6-1; else Length7 := Length6;	
	
	test Length7 = 0;
	
	[fond:FOND] ⊂ ↑;
	[density:DENSITY] ⊂ ↑;
	[renv:RENV] ⊂ ↑;
	Root1 := FOND;
	Root2 := (Root1 + 7) % 12;
	Root3 := (Root2 + 7) % 12;
	Root4 := (Root3 + 7) % 12;
	Root5 := (Root4 + 7) % 12;
	Root6 := (Root5 + 7) % 12;
	Root0 := (Root1 + 5) % 12;
	Chdm7 := [scale:minor, tension:7, quinte:none, density:DENSITY];
	ChdM7 := [scale:none, tension:7, quinte:none, density:DENSITY];
	ChdV7 := [scale:dominant, tension:7, quinte:none, density:DENSITY];
	Chdm75b := [scale:minor, tension:7, quinte:dim, density:DENSITY];
	↓1 := [root:Root6] ∪ Chdm75b;
	↓2 := [root:Root5] ∪ Chdm7;
	↓3 := [root:Root4] ∪ Chdm7;
	↓4 := [root:Root3] ∪ Chdm7;
	↓5 := [root:Root2] ∪ ChdV7;
	↓6 := [root:Root1] ∪ ChdM7;
	↓7 := [root:Root0] ∪ ChdM7;

if (Base=1) {
	⇑ := [dernierAccord:Root6];
}
else if (Base=2) {
	⇑ := [dernierAccord:Root5];
}
else if (Base=3) {
	⇑ := [dernierAccord:Root4];
}
else if (Base=4) {
	⇑ := [dernierAccord:Root3];
}
else if (Base=5) {
	⇑ := [dernierAccord:Root2];
}
else if (Base=6) {
	⇑ := [dernierAccord:Root1];
}
else if (Base=7) {
	⇑ := [dernierAccord:Root0];
}

};

CAD → (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) // VIIm75b IIIm7 VIm7 IIm7 V7 IM7 IM7
{
	[cad:0, type:1];
	[length:Length0, base:Base];

Q1 := q0;
if (Q1=q0) {if ($1) Q2 := q1; else Q2 := q0;}

if (Q2=q0) {if ($2) Q3 := q1; else Q3 := q0;}
else if (Q2=q1) {if ($2) Q3 := q1; else	Q3 := q2;}
else if (Q2=q2) {if ($2) Q3 := qf; else	Q3 := q2;}
else if (Q2=qf) {Q3 := qf;}

if (Q3=q0) {if ($3) Q4 := q1; else Q4 := q0;}
else if (Q3=q1) {if ($3) Q4 := q1; else	Q4 := q2;}
else if (Q3=q2) {if ($3) Q4 := qf; else	Q4 := q2;}
else if (Q3=qf) {Q4 := qf;}

if (Q4=q0) {if ($4) Q5 := q1; else Q5 := q0;}
else if (Q4=q1) {if ($4) Q5 := q1; else	Q5 := q2;}
else if (Q4=q2) {if ($4) Q5 := qf; else	Q5 := q2;}
else if (Q4=qf) {Q5 := qf;}

if (Q5=q0) {if ($5) Q6 := q1; else Q6 := q0;}
else if (Q5=q1) {if ($5) Q6 := q1; else	Q6 := q2;}
else if (Q5=q2) {if ($5) Q6 := qf; else	Q6 := q2;}
else if (Q5=qf) {Q6 := qf;}

if (Q6=q0) {if ($6) Q7 := q1; else Q7 := q0;}
else if (Q6=q1) {if ($6) Q7 := q1; else	Q7 := q2;}
else if (Q6=q2) {if ($6) Q7 := qf; else	Q7 := q2;}
else if (Q6=qf) {Q7 := qf;}

if (Q7=q0) {if ($7) Q8 := q1; else Q8 := q0;}
else if (Q7=q1) {if ($7) Q8 := q1; else	Q8 := q2;}
else if (Q7=q2) {if ($7) Q8 := qf; else	Q8 := q2;}
else if (Q7=qf) {Q8 := qf;}

test (Q8≠qf);

// Lionel modifie pour que base=X signifie
// que la séquence se termine par X

if (Base=1) {
	test ($1 ∧ ¬$2);
}
else if (Base=2) {
	test ($2 ∧ ¬$3);
}
else if (Base=3) {
	test ($3 ∧ ¬$4);
}
else if (Base=4) {
	test ($4 ∧ ¬$5);
}
else if (Base=5) {
	test ($5 ∧ ¬$6);
}
else if (Base=6) {
	test ($6 ∧ ¬$7);
}
else if (Base=7) {
	test ($7);
}

// Ceci pour compter
	if ($1)	Length1 := Length0-1; else Length1 := Length0;	
	if ($2)	Length2 := Length1-1; else Length2 := Length1;	
	if ($3)	Length3 := Length2-1; else Length3 := Length2;	
	if ($4)	Length4 := Length3-1; else Length4 := Length3;	
	if ($5)	Length5 := Length4-1; else Length5 := Length4;	
	if ($6)	Length6 := Length5-1; else Length6 := Length5;	
	if ($7)	Length7 := Length6-1; else Length7 := Length6;	
	
	test Length7 = 0;
	
	[fond:FOND] ⊂ ↑;
	[density:DENSITY] ⊂ ↑;
	[renv:RENV] ⊂ ↑;
	Root1 := FOND;
	Root2 := (Root1 + 7) % 12;
	Root3 := (Root2 + 7) % 12;
	Root4 := (Root3 + 7) % 12;
	Root5 := (Root4 + 7) % 12;
	Root6 := (Root5 + 7) % 12;
	Root0 := (Root1 + 5) % 12;
	Chdm7 := [scale:minor, tension:7, quinte:none, density:DENSITY];
	ChdM7 := [scale:none, tension:7, quinte:none, density:DENSITY];
	ChdV7 := [scale:dominant, tension:7, quinte:none, density:DENSITY];
	Chdm75b := [scale:minor, tension:7, quinte:dim, density:DENSITY];
	↓1 := [root:Root6] ∪ Chdm75b;
	↓2 := [root:Root5] ∪ Chdm7;
	↓3 := [root:Root4] ∪ Chdm7;
	↓4 := [root:Root3] ∪ Chdm7;
	↓5 := [root:Root2] ∪ ChdV7;
	↓6 := [root:Root1] ∪ ChdM7;
	↓7 := [root:Root1] ∪ ChdM7;

if (Base=1) {
	⇑ := [dernierAccord:Root6];
}
else if (Base=2) {
	⇑ := [dernierAccord:Root5];
}
else if (Base=3) {
	⇑ := [dernierAccord:Root4];
}
else if (Base=4) {
	⇑ := [dernierAccord:Root3];
}
else if (Base=5) {
	⇑ := [dernierAccord:Root2];
}
else if (Base=6) {
	⇑ := [dernierAccord:Root1];
}
else if (Base=7) {
	⇑ := [dernierAccord:Root1];
}

};

////// Cadences Mineures ////////////////

CAD → (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) // VIIdim7-IIIbM75aug-VIbM7-IIm75b-V79b-Im7M-IVm7
{
	[cad:1, type:0];
	[length:Length0, base:Base];

Q1 := q0;
if (Q1=q0) {if ($1) Q2 := q1; else Q2 := q0;}

if (Q2=q0) {if ($2) Q3 := q1; else Q3 := q0;}
else if (Q2=q1) {if ($2) Q3 := q1; else	Q3 := q2;}
else if (Q2=q2) {if ($2) Q3 := qf; else	Q3 := q2;}
else if (Q2=qf) {Q3 := qf;}

if (Q3=q0) {if ($3) Q4 := q1; else Q4 := q0;}
else if (Q3=q1) {if ($3) Q4 := q1; else	Q4 := q2;}
else if (Q3=q2) {if ($3) Q4 := qf; else	Q4 := q2;}
else if (Q3=qf) {Q4 := qf;}

if (Q4=q0) {if ($4) Q5 := q1; else Q5 := q0;}
else if (Q4=q1) {if ($4) Q5 := q1; else	Q5 := q2;}
else if (Q4=q2) {if ($4) Q5 := qf; else	Q5 := q2;}
else if (Q4=qf) {Q5 := qf;}

if (Q5=q0) {if ($5) Q6 := q1; else Q6 := q0;}
else if (Q5=q1) {if ($5) Q6 := q1; else	Q6 := q2;}
else if (Q5=q2) {if ($5) Q6 := qf; else	Q6 := q2;}
else if (Q5=qf) {Q6 := qf;}

if (Q6=q0) {if ($6) Q7 := q1; else Q7 := q0;}
else if (Q6=q1) {if ($6) Q7 := q1; else	Q7 := q2;}
else if (Q6=q2) {if ($6) Q7 := qf; else	Q7 := q2;}
else if (Q6=qf) {Q7 := qf;}

if (Q7=q0) {if ($7) Q8 := q1; else Q8 := q0;}
else if (Q7=q1) {if ($7) Q8 := q1; else	Q8 := q2;}
else if (Q7=q2) {if ($7) Q8 := qf; else	Q8 := q2;}
else if (Q7=qf) {Q8 := qf;}

test (Q8≠qf);

// Lionel modifie pour que base=X signifie
// que la séquence se termine par X

if (Base=1) {
	test ($1 ∧ ¬$2);
}
else if (Base=2) {
	test ($2 ∧ ¬$3);
}
else if (Base=3) {
	test ($3 ∧ ¬$4);
}
else if (Base=4) {
	test ($4 ∧ ¬$5);
}
else if (Base=5) {
	test ($5 ∧ ¬$6);
}
else if (Base=6) {
	test ($6 ∧ ¬$7);
}
else if (Base=7) {
	test ($7);
}

// Ceci pour compter
	if ($1)	Length1 := Length0-1; else Length1 := Length0;	
	if ($2)	Length2 := Length1-1; else Length2 := Length1;	
	if ($3)	Length3 := Length2-1; else Length3 := Length2;	
	if ($4)	Length4 := Length3-1; else Length4 := Length3;	
	if ($5)	Length5 := Length4-1; else Length5 := Length4;	
	if ($6)	Length6 := Length5-1; else Length6 := Length5;	
	if ($7)	Length7 := Length6-1; else Length7 := Length6;	
	
	test Length7 = 0;
	
	[fond:FOND] ⊂ ↑;
	[density:DENSITY] ⊂ ↑;
	Root1 := FOND;
	Root2 := (Root1 + 7) % 12;
	Root3 := (Root2 + 7) % 12;
	Root4 := (Root3 + 6) % 12;
	Root5 := (Root4 + 7) % 12;
	Root6 := (Root5 + 8) % 12;
	Root0 := (Root1 + 5) % 12;
	Chdm7 := [scale:minor, tension:7, quinte:none, density:DENSITY];
	ChdM7 := [scale:none, tension:7, quinte:none, density:DENSITY];
	ChdV7 := [scale:dominant, tension:7, quinte:none, density:DENSITY];
	Chdm75b := [scale:minor, tension:7, quinte:dim, density:DENSITY];
	Chdm75b := [scale:minor, tension:7, quinte:dim, density:DENSITY];
	ChdmM7 := [scale:minor_h, tension:7, quinte:none, density:DENSITY];
	ChdV79b := [scale:dominant, tension:9, quinte:none, density:DENSITY];
	Chdm7 := [scale:minor, tension:7, quinte:none, density:DENSITY];
	ChdM7 := [scale:none, tension:7, quinte:none, density:DENSITY];
	Chddim := [scale:minor, tension:6, quinte:dim, density:DENSITY];
	ChdM75aug := [scale:dominant, tension:7, quinte:aug, density:DENSITY];
	↓1 := [root:Root6] ∪ Chddim;
	↓2 := [root:Root5] ∪ ChdM75aug;
	↓3 := [root:Root4] ∪ ChdM7;
	↓4 := [root:Root3] ∪ Chdm75b;
	↓5 := [root:Root2] ∪ ChdV79b;
	↓6 := [root:Root1] ∪ ChdmM7;
	↓7 := [root:Root0] ∪ Chdm7;
};

CAD → (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) (Chord) // VIIdim7-IIIbM75aug-VIbM7-IIm75b-V79b-Im7M-Im7M
{
	[cad:1, type:1];
	[length:Length0, base:Base];

Q1 := q0;
if (Q1=q0) {if ($1) Q2 := q1; else Q2 := q0;}

if (Q2=q0) {if ($2) Q3 := q1; else Q3 := q0;}
else if (Q2=q1) {if ($2) Q3 := q1; else	Q3 := q2;}
else if (Q2=q2) {if ($2) Q3 := qf; else	Q3 := q2;}
else if (Q2=qf) {Q3 := qf;}

if (Q3=q0) {if ($3) Q4 := q1; else Q4 := q0;}
else if (Q3=q1) {if ($3) Q4 := q1; else	Q4 := q2;}
else if (Q3=q2) {if ($3) Q4 := qf; else	Q4 := q2;}
else if (Q3=qf) {Q4 := qf;}

if (Q4=q0) {if ($4) Q5 := q1; else Q5 := q0;}
else if (Q4=q1) {if ($4) Q5 := q1; else	Q5 := q2;}
else if (Q4=q2) {if ($4) Q5 := qf; else	Q5 := q2;}
else if (Q4=qf) {Q5 := qf;}

if (Q5=q0) {if ($5) Q6 := q1; else Q6 := q0;}
else if (Q5=q1) {if ($5) Q6 := q1; else	Q6 := q2;}
else if (Q5=q2) {if ($5) Q6 := qf; else	Q6 := q2;}
else if (Q5=qf) {Q6 := qf;}

if (Q6=q0) {if ($6) Q7 := q1; else Q7 := q0;}
else if (Q6=q1) {if ($6) Q7 := q1; else	Q7 := q2;}
else if (Q6=q2) {if ($6) Q7 := qf; else	Q7 := q2;}
else if (Q6=qf) {Q7 := qf;}

if (Q7=q0) {if ($7) Q8 := q1; else Q8 := q0;}
else if (Q7=q1) {if ($7) Q8 := q1; else	Q8 := q2;}
else if (Q7=q2) {if ($7) Q8 := qf; else	Q8 := q2;}
else if (Q7=qf) {Q8 := qf;}

test (Q8≠qf);

// Lionel modifie pour que base=X signifie
// que la séquence se termine par X

if (Base=1) {
	test ($1 ∧ ¬$2);
}
else if (Base=2) {
	test ($2 ∧ ¬$3);
}
else if (Base=3) {
	test ($3 ∧ ¬$4);
}
else if (Base=4) {
	test ($4 ∧ ¬$5);
}
else if (Base=5) {
	test ($5 ∧ ¬$6);
}
else if (Base=6) {
	test ($6 ∧ ¬$7);
}
else if (Base=7) {
	test ($7);
}

// Ceci pour compter
	if ($1)	Length1 := Length0-1; else Length1 := Length0;	
	if ($2)	Length2 := Length1-1; else Length2 := Length1;	
	if ($3)	Length3 := Length2-1; else Length3 := Length2;	
	if ($4)	Length4 := Length3-1; else Length4 := Length3;	
	if ($5)	Length5 := Length4-1; else Length5 := Length4;	
	if ($6)	Length6 := Length5-1; else Length6 := Length5;	
	if ($7)	Length7 := Length6-1; else Length7 := Length6;	
	
	test Length7 = 0;
	
	[fond:FOND] ⊂ ↑;
	[density:DENSITY] ⊂ ↑;
	Root1 := FOND;
	Root2 := (Root1 + 7) % 12;
	Root3 := (Root2 + 7) % 12;
	Root4 := (Root3 + 6) % 12;
	Root5 := (Root4 + 7) % 12;
	Root6 := (Root5 + 8) % 12;
	Root0 := (Root1 + 5) % 12;
	Chdm7 := [scale:minor, tension:7, quinte:none, density:DENSITY];
	ChdM7 := [scale:none, tension:7, quinte:none, density:DENSITY];
	ChdV7 := [scale:dominant, tension:7, quinte:none, density:DENSITY];
	Chdm75b := [scale:minor, tension:7, quinte:dim, density:DENSITY];
	Chdm75b := [scale:minor, tension:7, quinte:dim, density:DENSITY];
	ChdmM7 := [scale:minor_h, tension:7, quinte:none, density:DENSITY];
	ChdV79b := [scale:dominant, tension:9, quinte:none, density:DENSITY];
	Chdm7 := [scale:minor, tension:7, quinte:none, density:DENSITY];
	ChdM7 := [scale:none, tension:7, quinte:none, density:DENSITY];
	Chddim := [scale:minor, tension:6, quinte:dim, density:DENSITY];
	ChdM75aug := [scale:dominant, tension:7, quinte:aug, density:DENSITY];
	↓1 := [root:Root6] ∪ Chddim;
	↓2 := [root:Root5] ∪ ChdM75aug;
	↓3 := [root:Root4] ∪ ChdM7;
	↓4 := [root:Root3] ∪ Chdm75b;
	↓5 := [root:Root2] ∪ ChdV79b;
	↓6 := [root:Root1] ∪ ChdmM7;
	↓7 := [root:Root1] ∪ ChdmM7;
};

//////    Nombre d'accords   //////



Chord → chd
{
	[density:1];
	[root:ROOT] ⊂ ↑;
	[scale:SCALE] ⊂ ↑;
	[tension:TENSION] ⊂ ↑;
	[quinte:QUINTE] ⊂ ↑;
	↓1 := [root:ROOT, scale:SCALE, tension:TENSION, quinte:QUINTE];
};

Chord → chd chd
{
	[density:2];
	[root:ROOT] ⊂ ↑;
	[scale:SCALE] ⊂ ↑;
	[tension:TENSION] ⊂ ↑;
	[quinte:QUINTE] ⊂ ↑;
	↓1 := [root:ROOT, scale:SCALE, tension:TENSION, quinte:QUINTE];
	↓2 := [root:ROOT, scale:SCALE, tension:TENSION, quinte:QUINTE];
};
